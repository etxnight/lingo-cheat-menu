// lingco v8
// Create and inject the menu
const menuContainer = document.createElement('div');
menuContainer.style.cssText = `
  position: fixed;
  bottom: 1rem;
  right: 1rem;
  z-index: 9999;
  font-family: system-ui, -apple-system, sans-serif;
`;

let isOpen = false;
// Storage for vocabulary words
let wordDefStorage = [];

// toggle button to open menu
const toggleButton = document.createElement('button');
toggleButton.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M12.22 2h-.44a2 2 0 0 0-2 2v.18a2 2 0 0 1-1 1.73l-.43.25a2 2 0 0 1-2 0l-.15-.08a2 2 0 0 0-2.73.73l-.22.38a2 2 0 0 0 .73 2.73l.15.1a2 2 0 0 1 1 1.72v.51a2 2 0 0 1-1 1.74l-.15.09a2 2 0 0 0-.73 2.73l.22.38a2 2 0 0 0 2.73.73l.15-.08a2 2 0 0 1 2 0l.43.25a2 2 0 0 1 1 1.73V20a2 2 0 0 0 2 2h.44a2 2 0 0 0 2-2v-.18a2 2 0 0 1 1-1.73l.43-.25a2 2 0 0 1 2 0l.15.08a2 2 0 0 0 2.73-.73l.22-.39a2 2 0 0 0-.73-2.73l-.15-.08a2 2 0 0 1-1-1.74v-.5a2 2 0 0 1 1-1.74l.15-.09a2 2 0 0 0 .73-2.73l-.22-.38a2 2 0 0 0-2.73-.73l-.15.08a2 2 0 0 1-2 0l-.43-.25a2 2 0 0 1-1-1.73V4a2 2 0 0 0-2-2z"></path><circle cx="12" cy="12" r="3"></circle></svg>`;
toggleButton.style.cssText = `
  background-color: #3b82f6;
  color: white;
  padding: 0.5rem;
  border-radius: 9999px;
  border: none;
  cursor: pointer;
  box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
  display: flex;
  align-items: center;
  justify-content: center;
  transition: background-color 0.2s;
`;
toggleButton.addEventListener('mouseover', () => toggleButton.style.backgroundColor = '#2563eb');
toggleButton.addEventListener('mouseout', () => toggleButton.style.backgroundColor = '#3b82f6');

// make le the menu
const menu = document.createElement('div');
menu.style.cssText = `
  position: absolute;
  bottom: 3.5rem;
  right: 0;
  background-color: white;
  border-radius: 0.5rem;
  padding: 1rem;
  width: 12rem;
  box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
  display: none;
`;

//  menu title container w/ clear button
const menuTitleContainer = document.createElement('div');
menuTitleContainer.style.cssText = `
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 0.75rem;
  padding-bottom: 0.5rem;
  border-bottom: 1px solid #e5e7eb;
`;

// title
const menuTitle = document.createElement('div');
menuTitle.textContent = 'Lingco menu v8';
menuTitle.style.cssText = `
  font-weight: 600;
  font-size: 1rem;
  color: #3b82f6;
`;

//  clear button --------- used to refresh storage/ load a new vocab set
const clearButton = document.createElement('button');
clearButton.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M3 6h18"/><path d="M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6"/><path d="M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2"/></svg>`;
clearButton.style.cssText = `
  background: none;
  border: none;
  padding: 4px;
  cursor: pointer;
  color: #ef4444;
  display: flex;
  align-items: center;
  justify-content: center;
  border-radius: 50%;
  transition: all 0.2s;
`;

//  hover effects
clearButton.addEventListener('mouseover', () => {
  clearButton.style.backgroundColor = '#fee2e2';
});
clearButton.addEventListener('mouseout', () => {
  clearButton.style.backgroundColor = 'transparent';
});

//  click handler
clearButton.addEventListener('click', () => {
  // Clear localStorage
  localStorage.removeItem('lingcoVocabStorage');
  // Clear memory storage
  wordDefStorage = [];
  console.log('Vocabulary storage cleared');
  
  // Visuals
  clearButton.style.transform = 'rotate(20deg)';
  setTimeout(() => {
    clearButton.style.transform = 'rotate(0deg)';
  }, 200);
});

// Add elements to container
menuTitleContainer.appendChild(menuTitle);
menuTitleContainer.appendChild(clearButton);

// Add title to menu
menu.appendChild(menuTitleContainer);

// Helper to create buttons littt
function createButton(text, onClick, disabled = false, note = null) {
  const buttonContainer = document.createElement('div');
  buttonContainer.style.cssText = `
    width: 100%;
    margin-bottom: 0.5rem;
  `;
  
  const button = document.createElement('button');
  button.textContent = text;
  button.style.cssText = `
    width: 100%;
    background-color: ${disabled ? '#d1d5db' : '#f3f4f6'};
    padding: 0.5rem 1rem;
    border-radius: 0.375rem;
    border: none;
    font-size: 0.875rem;
    cursor: ${disabled ? 'not-allowed' : 'pointer'};
    transition: background-color 0.2s;
  `;
  if (!disabled) {
    button.addEventListener('mouseover', () => button.style.backgroundColor = '#e5e7eb');
    button.addEventListener('mouseout', () => button.style.backgroundColor = '#f3f4f6');
    button.addEventListener('click', onClick);
  }
  
  buttonContainer.appendChild(button);
  
  if (note) {
    const noteElement = document.createElement('div');
    noteElement.textContent = note;
    noteElement.style.cssText = `
      font-size: 0.7rem;
      color: #6b7280;
      text-align: center;
      margin-top: 0.2rem;
    `;
    buttonContainer.appendChild(noteElement);
  }
  
  return buttonContainer;
}

// Function to extract vocabulary words
function extractVocabulary() {
  try {
    // Clear existing storage
    wordDefStorage = [];
    
    // Get the vocabulary container
    const vocabContainer = document.evaluate(
      '/html/body/div[1]/div[2]/div/div[3]/div/div[2]/div',
      document,
      null,
      XPathResult.FIRST_ORDERED_NODE_TYPE,
      null
    ).singleNodeValue;
    
    if (!vocabContainer) {
      console.log('Vocabulary container not found');
      return;
    }
    
    // Find all vocabulary cards
    const vocabCards = vocabContainer.querySelectorAll('.card');
    
    vocabCards.forEach(card => {
      const titleElement = card.querySelector('.title');
      const definitionElement = card.querySelector('.definition');
      
      if (titleElement && definitionElement) {
        const spanish = titleElement.textContent.trim();
        const english = definitionElement.textContent.trim();
        
        wordDefStorage.push({
          spanish: spanish,
          english: english
        });
      }
    });
    
    console.log(`Extracted ${wordDefStorage.length} vocabulary words`);
    
    // Save to localStorage for loading
    localStorage.setItem('lingcoVocabStorage', JSON.stringify(wordDefStorage));
  } catch (error) {
    console.error('Error extracting vocabulary:', error);
  }
}

// Load vocabulary from localStorage if >1 use
function loadVocabulary() {
  const savedVocab = localStorage.getItem('lingcoVocabStorage');
  if (savedVocab) {
    try {
      wordDefStorage = JSON.parse(savedVocab);
      console.log(`Loaded ${wordDefStorage.length} vocabulary words from storage`);
    } catch (e) {
      console.error('Error loading vocabulary from storage:', e);
    }
  }
}

// Button functions ------------------------------------------------------------ \
function allowPaste() {
  // Override clipboard protection
  document.addEventListener('paste', (e) => {
    e.stopImmediatePropagation();
  }, true);

  // Disable paste prevention
  const originalShowModal = window.showModal;
  window.showModal = function(title, message) {
    if (message?.includes('paste') || title?.includes('paste')) {
      return;
    }
    return originalShowModal?.apply(this, arguments);
  };

  // Disable anti-paste
  const originalFetch = window.fetch;
  window.fetch = function(...args) {
    if (args[0]?.includes('notification') || args[0]?.includes('paste')) {
      return Promise.resolve({ ok: true });
    }
    return originalFetch.apply(this, args);
  };
}

function infiniteTime() {
  // just Delete the element cuz I was literally tryna figure inf time out for so long but it ended up being so easy I was like bruh
  try {
    const xpathResult = document.evaluate(
      '/html/body/div[1]/div/div[2]', 
      document, 
      null, 
      XPathResult.FIRST_ORDERED_NODE_TYPE, 
      null
    );
    
    if (xpathResult.singleNodeValue) {
      const element = xpathResult.singleNodeValue;
      element.remove();
      console.log('time has been stopepd');
    } else {
      console.log('pause first then activate');
    }
  } catch (error) {
    console.error('Error removing element:', error);
  }
}

function autoTranslate() {
  // makea style element to prevent fading and make text selectable ig
  const style = document.createElement('style');
  style.textContent = `
    .session-typing-diff.incorrect.fade-answer {
      opacity: 1 !important;
      user-select: text !important;
      -webkit-user-select: text !important;
      background-color: rgba(76, 175, 80, 0.1) !important;
      padding: 2px 6px !important;
      border-radius: 4px !important;
      cursor: text !important;
      transition: none !important;
    }
  `;
  document.head.appendChild(style);

  // Override any fade animations
  const observer = new MutationObserver((mutations) => {
    mutations.forEach((mutation) => {
      mutation.addedNodes.forEach((node) => {
        if (node.nodeType === Node.ELEMENT_NODE) {
          const incorrectSpans = node.querySelectorAll('.session-typing-diff.incorrect');
          incorrectSpans.forEach(span => {
            span.style.opacity = '1';
            span.style.transition = 'none';
          });
        }
      });
    });
  });

  observer.observe(document.body, {
    childList: true,
    subtree: true
  });
}

// Auto Type 
function autoType() {
  try {
    // Load vocabulary if not already loaded
    if (wordDefStorage.length === 0) {
      loadVocabulary();
    }
    
    // guet word to translate
    const wordElement = document.evaluate(
      '/html/body/div[1]/div/div[2]/div/div[2]/div[1]/div/div[2]/p',
      document,
      null,
      XPathResult.FIRST_ORDERED_NODE_TYPE,
      null
    ).singleNodeValue;
    
    if (!wordElement) {
      console.log('Word element not found');
      return;
    }
    
    const word = wordElement.textContent.trim();
    
    // gt input field
    const inputElement = document.evaluate(
      '/html/body/div[1]/div/div[2]/div/div[2]/div[1]/div/div[4]/input',
      document,
      null,
      XPathResult.FIRST_ORDERED_NODE_TYPE,
      null
    ).singleNodeValue;
    
    if (!inputElement) {
      console.log('Input element not found');
      return;
    }
    
    // Find the translation
    let translation = '';
    const isSpanish = wordElement.getAttribute('lang') === 'es';
    
    for (const item of wordDefStorage) {
      if (isSpanish) {
        // If the word is in Spanish, translate to English
        if (item.spanish.toLowerCase() === word.toLowerCase()) {
          translation = item.english;
          break;
        }
      } else {
        // opposite of above
        if (item.english.toLowerCase() === word.toLowerCase()) {
          translation = item.spanish;
          break;
        }
      }
    }
    
    if (translation) {
      inputElement.value = translation;
      
      // Dispatch input event
      const event = new Event('input', { bubbles: true });
      inputElement.dispatchEvent(event);
      
      console.log(`Translated "${word}" to "${translation}"`);
    } else {
      console.log(`No translation found for "${word}"`);
    }
  } catch (error) {
    console.error('Error in auto type:', error);
  }
}

// Auto Choice function
function autoChoice() {
  try {
    // Load vocabulary if not already loaded
    if (wordDefStorage.length === 0) {
      loadVocabulary();
    }
    
    // Get the multiple choice container
    const multipleChoiceContainer = document.evaluate(
      '/html/body/div[1]/div/div[2]/div/div[2]/div[1]',
      document,
      null,
      XPathResult.FIRST_ORDERED_NODE_TYPE,
      null
    ).singleNodeValue;
    
    if (!multipleChoiceContainer) {
      console.log('Multiple choice container not found');
      return;
    }
    
    // Get the word to translate
    const wordElement = multipleChoiceContainer.querySelector('.session-title p');
    
    if (!wordElement) {
      console.log('Word element not found in multiple choice');
      return;
    }
    
    const word = wordElement.textContent.trim();
    const isSpanish = wordElement.getAttribute('lang') === 'es';
    
    // Find translation
    let translation = '';
    
    for (const item of wordDefStorage) {
      if (isSpanish) {
        // If the word is in Spanish then find English translation
        if (item.spanish.toLowerCase() === word.toLowerCase()) {
          translation = item.english.toLowerCase();
          break;
        }
      } else {
        // opposite of the above
        if (item.english.toLowerCase() === word.toLowerCase()) {
          translation = item.spanish.toLowerCase();
          break;
        }
      }
    }
    
    if (!translation) {
      console.log(`No translation found for "${word}"`);
      return;
    }
    
    // Get all choice buttons
    const choiceButtons = multipleChoiceContainer.querySelectorAll('.session-answer-choices button');
    
    if (!choiceButtons || choiceButtons.length === 0) {
      console.log('No choice buttons found');
      return;
    }
    
    let correctButton = null;
    
    // Find the button with the correct translate
    for (const button of choiceButtons) {
      const buttonText = button.textContent.trim().toLowerCase();
      
      if (buttonText === translation) {
        correctButton = button;
        break;
      }
    }
    
    if (correctButton) {
      // Highlight the correct button
      const originalBackground = correctButton.style.backgroundColor;
      const originalColor = correctButton.style.color;
      
      correctButton.style.backgroundColor = '#4ade80'; // Green background
      correctButton.style.color = 'white';
      correctButton.style.borderColor = '#4ade80';
      
      console.log(`Highlighted correct answer: "${correctButton.textContent.trim()}"`);
      
      // Reset after 3 sec
      setTimeout(() => {
        correctButton.style.backgroundColor = originalBackground;
        correctButton.style.color = originalColor;
        correctButton.style.borderColor = '';
      }, 3000);
    } else {
      console.log(`Correct answer not found among choices for "${word}" (translation: "${translation}")`);
    }
  } catch (error) {
    console.error('Error in auto choice:', error);
  }
}

// Fake Complete funct
function fakeComplete() {
  try {
    // Update the Learn New Terms button
    const buttonXPath = '/html/body/div[1]/div[2]/div/div[3]/div/div[1]/div[1]/div[2]/div/div[4]/button';
    const buttonElement = document.evaluate(
      buttonXPath,
      document,
      null,
      XPathResult.FIRST_ORDERED_NODE_TYPE,
      null
    ).singleNodeValue;
    
    if (buttonElement) {
      buttonElement.outerHTML = '<button type="button" disabled="" class="btn green disabled">Learn New Terms</button>';
      console.log('Updated Learn New Terms button');
    } else {
      console.log('Learn New Terms button not found');
    }
    
    // progress bar
    const progressBarXPath = '/html/body/div[1]/div[2]/div/div[3]/div/div[1]/div[2]/div/div/div/div';
    const progressBarElement = document.evaluate(
      progressBarXPath,
      document,
      null,
      XPathResult.FIRST_ORDERED_NODE_TYPE,
      null
    ).singleNodeValue;
    
    if (progressBarElement) {
      progressBarElement.outerHTML = '<div class="progress-bar-filled " style="width: 100%;"></div>';
      console.log('Updated progress bar to 100%');
    } else {
      console.log('Progress bar not found');
    }
    
    console.log('Fake completion applied successfully');
  } catch (error) {
    console.error('Error in fake complete:', error);
  }
}

// Notepad function
let notepadVisible = false;
let notepadContainer = null;

function toggleNotepad() {
  if (!notepadVisible) {
    // Create notepad if it doesn't exist
    if (!notepadContainer) {
      notepadContainer = document.createElement('div');
      notepadContainer.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        width: 300px;
        z-index: 9998;
        background-color: white;
        border-radius: 8px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
        display: flex;
        flex-direction: column;
        overflow: hidden;
      `;

      // header
      const notepadHeader = document.createElement('div');
      notepadHeader.style.cssText = `
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 10px 15px;
        background-color: #f3f4f6;
        border-bottom: 1px solid #e5e7eb;
      `;

      const notepadTitle = document.createElement('div');
      notepadTitle.textContent = 'Notes';
      notepadTitle.style.cssText = `
        font-weight: 600;
        font-size: 14px;
      `;

      const closeButton = document.createElement('button');
      closeButton.innerHTML = '&times;';
      closeButton.style.cssText = `
        background: none;
        border: none;
        font-size: 18px;
        cursor: pointer;
        color: #6b7280;
        padding: 0 5px;
      `;
      closeButton.addEventListener('click', toggleNotepad);

      notepadHeader.appendChild(notepadTitle);
      notepadHeader.appendChild(closeButton);

      // Create textarea
      const textarea = document.createElement('textarea');
      textarea.style.cssText = `
        width: 100%;
        height: 300px;
        padding: 12px 15px;
        border: none;
        resize: none;
        font-family: system-ui, -apple-system, sans-serif;
        font-size: 14px;
        line-height: 1.5;
        outline: none;
      `;
      textarea.placeholder = 'click the bookmark before you start the "learn new terms" for the script to work properly. \n When using auto type you need to click the text box and delete a character and retype it for you to be able to submit the answer. \n -fake complete - needs to be used on the home page of the module you want to appear competed \n\n cheat made by etxnight';
      
      // load saved notes
      const savedNotes = localStorage.getItem('lingcoHelperNotes');
      if (savedNotes) {
        textarea.value = savedNotes;
      }
      
      // Save notes
      textarea.addEventListener('input', () => {
        localStorage.setItem('lingcoHelperNotes', textarea.value);
      });
      notepadContainer.appendChild(notepadHeader);
      notepadContainer.appendChild(textarea);

      // Make notepad draggable
      let isDragging = false;
      let offsetX, offsetY;

      notepadHeader.addEventListener('mousedown', (e) => {
        isDragging = true;
        offsetX = e.clientX - notepadContainer.getBoundingClientRect().left;
        offsetY = e.clientY - notepadContainer.getBoundingClientRect().top;
        notepadHeader.style.cursor = 'grabbing';
      });

      document.addEventListener('mousemove', (e) => {
        if (!isDragging) return;
        
        const x = e.clientX - offsetX;
        const y = e.clientY - offsetY;
        
        // Keep notepad within
        const maxX = window.innerWidth - notepadContainer.offsetWidth;
        const maxY = window.innerHeight - notepadContainer.offsetHeight;
        
        notepadContainer.style.left = `${Math.max(0, Math.min(x, maxX))}px`;
        notepadContainer.style.top = `${Math.max(0, Math.min(y, maxY))}px`;
        notepadContainer.style.right = 'auto';
      });

      document.addEventListener('mouseup', () => {
        isDragging = false;
        if (notepadHeader) {
          notepadHeader.style.cursor = 'grab';
        }
      });
      document.body.appendChild(notepadContainer);
    }

    // Show notepad
    notepadContainer.style.display = 'flex';
    notepadVisible = true;
  } else {
    // Hide notepad
    notepadContainer.style.display = 'none';
    notepadVisible = false;
  }
}
let vocabPadVisible = false;
let vocabPadContainer = null;

function toggleVocabPad() {
  // Load vocabulary if not already loaded
  if (wordDefStorage.length === 0) {
    loadVocabulary();
    
    // If still empty, try to extract
    if (wordDefStorage.length === 0) {
      extractVocabulary();
    }
  }
  
  if (!vocabPadVisible) {
    // Create vocab pad
    if (!vocabPadContainer) {
      vocabPadContainer = document.createElement('div');
      vocabPadContainer.style.cssText = `
        position: fixed;
        top: 20px;
        left: 20px;
        width: 350px;
        height: 400px;
        z-index: 9998;
        background-color: white;
        border-radius: 8px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
        display: flex;
        flex-direction: column;
        overflow: hidden;
        resize: both;
        min-width: 250px;
        min-height: 200px;
      `;

      // header
      const vocabPadHeader = document.createElement('div');
      vocabPadHeader.style.cssText = `
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 10px 15px;
        background-color: #f3f4f6;
        border-bottom: 1px solid #e5e7eb;
      `;

      const vocabPadTitle = document.createElement('div');
      vocabPadTitle.textContent = 'Vocabulary';
      vocabPadTitle.style.cssText = `
        font-weight: 600;
        font-size: 14px;
      `;

      const closeButton = document.createElement('button');
      closeButton.innerHTML = '&times;';
      closeButton.style.cssText = `
        background: none;
        border: none;
        font-size: 18px;
        cursor: pointer;
        color: #6b7280;
        padding: 0 5px;
      `;
      closeButton.addEventListener('click', toggleVocabPad);

      vocabPadHeader.appendChild(vocabPadTitle);
      vocabPadHeader.appendChild(closeButton);

      // content area
      const vocabContent = document.createElement('div');
      vocabContent.style.cssText = `
        flex: 1;
        overflow-y: auto;
        padding: 12px 15px;
        font-family: system-ui, -apple-system, sans-serif;
        font-size: 14px;
        line-height: 1.5;
      `;
      
      // Populate with vocabulary
      updateVocabContent(vocabContent);
      vocabPadContainer.appendChild(vocabPadHeader);
      vocabPadContainer.appendChild(vocabContent);

      // Make vocab pad draggable
      let isDragging = false;
      let offsetX, offsetY;

      vocabPadHeader.addEventListener('mousedown', (e) => {
        isDragging = true;
        offsetX = e.clientX - vocabPadContainer.getBoundingClientRect().left;
        offsetY = e.clientY - vocabPadContainer.getBoundingClientRect().top;
        vocabPadHeader.style.cursor = 'grabbing';
      });

      document.addEventListener('mousemove', (e) => {
        if (!isDragging) return;
        
        const x = e.clientX - offsetX;
        const y = e.clientY - offsetY;
        
        // Keep vocab pad within
        const maxX = window.innerWidth - vocabPadContainer.offsetWidth;
        const maxY = window.innerHeight - vocabPadContainer.offsetHeight;
        
        vocabPadContainer.style.left = `${Math.max(0, Math.min(x, maxX))}px`;
        vocabPadContainer.style.top = `${Math.max(0, Math.min(y, maxY))}px`;
      });

      document.addEventListener('mouseup', () => {
        isDragging = false;
        if (vocabPadHeader) {
          vocabPadHeader.style.cursor = 'grab';
        }
      });
      document.body.appendChild(vocabPadContainer);
    } else {
      // Update content if
      const vocabContent = vocabPadContainer.querySelector('div:nth-child(2)');
      if (vocabContent) {
        updateVocabContent(vocabContent);
      }
    }

    // Show vocab pad
    vocabPadContainer.style.display = 'flex';
    vocabPadVisible = true;
  } else {
    // Hide vocab pad
    vocabPadContainer.style.display = 'none';
    vocabPadVisible = false;
  }
}

// update vocabulary content
function updateVocabContent(contentElement) {
  if (wordDefStorage.length === 0) {
    contentElement.innerHTML = '<p>No vocabulary words found. Visit the vocabulary page and click "Vocab" again to extract words.</p>';
    return;
  }
  
  let html = '';
  
  wordDefStorage.forEach((item, index) => {
    html += `<div style="margin-bottom: 8px; padding-bottom: 8px; ${index < wordDefStorage.length - 1 ? 'border-bottom: 1px solid #f0f0f0;' : ''}">
      <span style="font-weight: 600;">${item.spanish}</span> - ${item.english}
    </div>`;
  });
  
  contentElement.innerHTML = html;
}

// Extract vocabulary on page load
window.addEventListener('load', () => {
  loadVocabulary();
  
  // Set up a mutation observer to detect when we're on the vocabulary page
  const observer = new MutationObserver((mutations) => {
    // Check if vocabulary page
    const vocabContainer = document.evaluate(
      '/html/body/div[1]/div[2]/div/div[3]/div/div[2]/div',
      document,
      null,
      XPathResult.FIRST_ORDERED_NODE_TYPE,
      null
    ).singleNodeValue;
    
    if (vocabContainer) {
      extractVocabulary();
    }
  });
  
  observer.observe(document.body, {
    childList: true,
    subtree: true
  });
});

// buttons
menu.appendChild(createButton('Allow Paste', allowPaste ));
menu.appendChild(createButton('Infinite Time', infiniteTime, false, 'needs to be paused first'));
menu.appendChild(createButton('Translation freeze ', autoTranslate));
menu.appendChild(createButton('Auto Type', autoType));
menu.appendChild(createButton('Auto Choice', autoChoice));
menu.appendChild(createButton('Fake Complete', fakeComplete));
menu.appendChild(createButton('Note Pad', toggleNotepad));
menu.appendChild(createButton('Vocab words', toggleVocabPad));

toggleButton.addEventListener('click', () => {
  isOpen = !isOpen;
  menu.style.display = isOpen ? 'block' : 'none';
});

// Add elements to container
menuContainer.appendChild(menu);
menuContainer.appendChild(toggleButton);

// Add container to page
document.body.appendChild(menuContainer);
